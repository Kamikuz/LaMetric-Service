declare type Node = {
    demand?: string[];
    get: (object: any, options: any) => any;
    oneOf?: string[][];
    type?: string;
};
declare type Nodes = {
    [x: string]: Node;
};
declare type Parsers = {
    [x: string]: (object: any, options: any) => any;
};
declare type Obj = {
    [x: string]: any;
};
declare type Tar = string[];
declare type preRoute = {
    [x: string]: number;
};
declare class RelationX {
    apis: Nodes;
    private parsers;
    constructor({ nodes, parsers }: {
        nodes: Nodes;
        parsers?: Parsers;
    });
    router({ object, targets, map, preRoute }: {
        object: Obj;
        targets: Tar;
        map?: string[];
        preRoute?: any;
    }): {
        error: string[];
    } | {
        preRoute: preRoute;
    };
    parser(value: any, type: string | undefined, options: any): any;
    get({ object, targets, preRoute }: {
        object: Obj;
        targets: Tar;
        preRoute: preRoute;
    }, options: any): Promise<void>;
    relation: (object: Obj, targets: string[], options?: any) => Promise<any>;
}
export = RelationX;
